for i = 1 to n
    for j = 1 to n
        for k = 1 to n
O(n^3) because three nested for loop

for i = 1 to n
    ...
for i = 1 to 2*n
    ...
for i = 1 to 3*n
O(n) Because we have three seperate for loop and no matter the n the operation steps are the same

for i = 1 to n*n
    for j = 1 to n*n
O(n^4)
The time complexity of the given code is O(n^2 * n^2) or O(n^4), where n is the size of the input.

The outer loop iterates n^2 times, and the inner loop also iterates n^2 times for each iteration of the outer loop. Therefore, the total number of iterations is n^2 * n^2 = n^4.

Hence, the time complexity of this code is O(n^4).

k = n
while k > 0
    k -= 2
O(n)

k = 1
while k < 2*n
    k *= 2
O(log n)
The time complexity of the given code is O(log n), where n is the value of 2*n.

The code starts with k = 1 and repeatedly multiplies k by 2 until k becomes greater than or equal to 2n. The number of iterations required to reach this condition is equal to the logarithm base 2 of 2n, which is equal to log(2*n) = log 2 + log n = 1 + log n.

Therefore, the time complexity of the code is O(log n). Note that this is true regardless of the value of n, as long as n is a positive integer.


k = n
for i = 1 to n
    while k > 0
        k -= 1
O(n) Because nested while loop run only once

for i = 1 to 100
    for j = 1 to 10
O(1) The time complexity of the given code is O(1) because the total number of iterations is constant.

for i = 1 to n
    for j = 1 to n
        if i%2 == j%2
            break
O(n)	This nested for loop run O(n) and quit because the nested for loop break when ever the remainder are the same.